{"ast":null,"code":"import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return { ...navigationOptions,\n      ...configurer({ ...configProps,\n        navigationOptions\n      })\n    };\n  }\n\n  if (typeof configurer === 'object') {\n    return { ...navigationOptions,\n      ...configurer\n    };\n  }\n\n  return navigationOptions;\n}\n\nexport default ((routeConfigs, navigatorScreenConfig) => (navigation, screenProps, theme) => {\n  const {\n    state\n  } = navigation;\n  const route = state;\n  invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n  const routeConfig = routeConfigs[route.routeName];\n  const routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n  const configOptions = {\n    navigation,\n    screenProps: screenProps || {},\n    theme\n  };\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n  validateScreenOptions(outputConfig, route);\n  return outputConfig;\n});","map":{"version":3,"sources":["createConfigGetter.js"],"names":["configurer","navigationOptions","state","route","invariant","Component","getScreenForRouteName","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","screenProps","theme","outputConfig","applyConfig","validateScreenOptions"],"mappings":"AAAA,OAAA,SAAA,MAAA,oBAAA;AAEA,OAAA,qBAAA,MAAA,yBAAA;AACA,OAAA,qBAAA,MAAA,yBAAA;;AAEA,SAAA,WAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAiE;AAC/D,MAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpC,WAAO,EACL,GADK,iBAAA;AAEL,SAAGA,UAAU,CAAC,EACZ,GADY,WAAA;AAEZC,QAAAA;AAFY,OAAD;AAFR,KAAP;AAOD;;AACD,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,WAAO,EACL,GADK,iBAAA;AAEL,SAAGD;AAFE,KAAP;AAID;;AACD,SAAA,iBAAA;AACD;;AAED,gBAAe,CAAA,YAAA,EAAA,qBAAA,KAAyC,CAAA,UAAA,EAAA,WAAA,EAAA,KAAA,KAInD;AACH,QAAM;AAAEE,IAAAA;AAAF,MAAN,UAAA;AACA,QAAMC,KAAK,GAAX,KAAA;AAEAC,EAAAA,SAAS,CACPD,KAAK,CAALA,SAAAA,IAAmB,OAAOA,KAAK,CAAZ,SAAA,KADZ,QAAA,EAATC,gEAAS,CAATA;AAKA,QAAMC,SAAS,GAAGC,qBAAqB,CAAA,YAAA,EAAeH,KAAK,CAA3D,SAAuC,CAAvC;AAEA,QAAMI,WAAW,GAAGC,YAAY,CAACL,KAAK,CAAtC,SAAgC,CAAhC;AAEA,QAAMM,iBAAiB,GACrBF,WAAW,KAAXA,SAAAA,GAAAA,IAAAA,GAAmCA,WAAW,CADhD,iBAAA;AAEA,QAAMG,qBAAqB,GAAGL,SAAS,CAAvC,iBAAA;AAEA,QAAMM,aAAa,GAAG;AAAA,IAAA,UAAA;AAAcC,IAAAA,WAAW,EAAEA,WAAW,IAAtC,EAAA;AAA8CC,IAAAA;AAA9C,GAAtB;AAEA,MAAIC,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,EAAA,EAA9B,aAA8B,CAA9B;AACAD,EAAAA,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAKAA,EAAAA,YAAY,GAAGC,WAAW,CAAA,iBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAEAE,EAAAA,qBAAqB,CAAA,YAAA,EAArBA,KAAqB,CAArBA;AAEA,SAAA,YAAA;AAjCF,CAAA","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}