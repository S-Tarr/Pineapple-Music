{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}) {\n  const {\n    state,\n    descriptors,\n    navigation\n  } = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n      const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          // When user taps on already focused tab and we're inside the tab,\n          // reset the stack to replicate native behaviour\n          navigation.dispatch({ ...StackActions.popToTop(),\n            target: state.key\n          });\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(NativeStackView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  }));\n}\n\nexport default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["rest","navigation","useNavigationBuilder","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","descriptors","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,sBAAA,EAAA,YAAA,EAAA,WAAA,EAAA,oBAAA,QAAA,0BAAA;AAWA,OAAO,KAAP,KAAA,MAAA,OAAA;AAOA,OAAA,eAAA,MAAA,0BAAA;;AAEA,SAAA,oBAAA,CAA8B;AAAA,EAAA,gBAAA;AAAA,EAAA,QAAA;AAAA,EAAA,eAAA;AAAA,EAAA,aAAA;AAK5B,KAAGA;AALyB,CAA9B,EAM8B;AAC5B,QAAM;AAAA,IAAA,KAAA;AAAA,IAAA,WAAA;AAAsBC,IAAAA;AAAtB,MAAqCC,oBAAoB,CAAA,WAAA,EAMhD;AAAA,IAAA,gBAAA;AAAA,IAAA,QAAA;AAAA,IAAA,eAAA;AAIbC,IAAAA;AAJa,GANgD,CAA/D;AAaAC,EAAAA,KAAK,CAALA,SAAAA,CACE,MAAA;AAAA,QAAA,qBAAA;;AAAA,WACEH,UADF,KAAA,IACEA,IAAAA,UADF,KAAA,KAAA,CACEA,GADF,KAAA,CACEA,GADF,CAAA,qBAAA,GACEA,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAuCI,CAAD,IAAY;AAChD,YAAMC,SAAS,GAAGL,UAAU,CADoB,SAC9BA,EAAlB,CADgD,CAGhD;AACA;;AACAM,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AACA;AACA;AACAJ,UAAAA,UAAU,CAAVA,QAAAA,CAAoB,EAClB,GAAGQ,YAAY,CADG,QACfA,EADe;AAElBC,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFI,WAApBV;AAID;AAZHM,OAAqB,CAArBA;AANJ,KACEN,CADF;AADFG,GAAAA,EAsBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA;AAyBA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,WAAW,EAAEQ;AAJf,GAAA,CAAA,CADF;AAQD;;AAED,eAAeC,sBAAsB,CAArC,oBAAqC,CAArC","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"module"}