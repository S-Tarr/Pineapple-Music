{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable react/sort-comp */\n\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\nconst {\n  urlToPathAndParams\n} = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n\n\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n} // Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\n\n\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n} // We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\n\nlet _reactNavigationIsHydratingState = false; // Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\n\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"subs\", null);\n\n      _defineProperty(this, \"_actionEventSubscribers\", new Set());\n\n      _defineProperty(this, \"_handleOpenURL\", ({\n        url\n      }) => {\n        const {\n          enableURLHandling,\n          uriPrefix\n        } = this.props;\n\n        if (enableURLHandling === false) {\n          return;\n        }\n\n        const parsedUrl = urlToPathAndParams(url, uriPrefix);\n\n        if (parsedUrl) {\n          const {\n            path,\n            params\n          } = parsedUrl;\n          const action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            this.dispatch(action);\n          }\n        }\n      });\n\n      _defineProperty(this, \"_persistNavigationState\", async nav => {\n        const {\n          persistNavigationState\n        } = this.props;\n\n        if (persistNavigationState) {\n          try {\n            await persistNavigationState(nav);\n          } catch (err) {\n            console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n          }\n        }\n      });\n\n      _defineProperty(this, \"dispatch\", action => {\n        if (this.props.navigation) {\n          return this.props.navigation.dispatch(action);\n        } // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n\n\n        this._navState = this._navState || this.state.nav;\n        const lastNavState = this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        const reducedState = Component.router.getStateForAction(action, lastNavState);\n        const navState = reducedState === null ? lastNavState : reducedState;\n\n        const dispatchActionEvents = () => {\n          this._actionEventSubscribers.forEach(subscriber => subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState\n          }));\n        };\n\n        if (reducedState === null) {\n          // The router will return null when action has been handled and the state hasn't changed.\n          // dispatch returns true when something has been handled.\n          dispatchActionEvents();\n          return true;\n        }\n\n        if (navState !== lastNavState) {\n          // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n          this._navState = navState;\n          this.setState({\n            nav: navState\n          }, () => {\n            this._onNavigationStateChange(lastNavState, navState, action);\n\n            dispatchActionEvents();\n\n            this._persistNavigationState(navState);\n          });\n          return true;\n        }\n\n        dispatchActionEvents();\n        return false;\n      });\n\n      _defineProperty(this, \"_getScreenProps\", () => this.props.screenProps);\n\n      _defineProperty(this, \"_getTheme\", () => {\n        if (this.props.theme === 'light' || this.props.theme === 'dark') {\n          return this.props.theme;\n        } else if (this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \".concat(this.props.theme, \". Only 'light' and 'dark' are supported. Falling back to 'light'\"));\n          return 'light';\n        }\n      });\n\n      validateProps(props);\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \".concat(docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')));\n          }\n        }\n      }\n\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL); // Pull out anything that can impact state\n\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState\n        } = await this.getStartupParams());\n      } // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n\n\n      let action = this._initialAction; // eslint-disable-next-line react/no-access-state-in-setstate\n\n      let startupState = this.state.nav;\n\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      } // Pull user-provided persisted state\n\n\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      } // Pull state out of URL\n\n\n      if (parsedUrl) {\n        const {\n          path,\n          params\n        } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(path, params);\n\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(urlAction, startupState);\n        }\n      }\n\n      const dispatchActions = () => this._actionEventSubscribers.forEach(subscriber => subscriber({\n        type: 'action',\n        action,\n        state: this.state.nav,\n        lastState: null\n      }));\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      } // eslint-disable-next-line react/no-did-mount-set-state\n\n\n      this.setState({\n        nav: startupState\n      }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const {\n        uriPrefix,\n        loadNavigationState\n      } = this.props;\n      let url, loadedNavState;\n\n      try {\n        [url, loadedNavState] = await Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n      } catch (err) {// ignore\n      }\n\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    componentWillUnmount() {\n      var _this$_linkingSub;\n\n      this._isMounted = false; // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n\n      if ((_this$_linkingSub = this._linkingSub) === null || _this$_linkingSub === void 0 ? void 0 : _this$_linkingSub.remove) {\n        var _this$_linkingSub2;\n\n        (_this$_linkingSub2 = this._linkingSub) === null || _this$_linkingSub2 === void 0 ? void 0 : _this$_linkingSub2.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    } // Per-tick temporary storage for state.nav\n\n\n    render() {\n      let navigation = this.props.navigation;\n\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n\n        if (!navState) {\n          return this._renderLoading();\n        }\n\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n\n        navigation = this._navigation;\n      }\n\n      invariant(navigation, 'failed to get navigation');\n      return /*#__PURE__*/React.createElement(ThemeProvider, {\n        value: this._getTheme()\n      }, /*#__PURE__*/React.createElement(NavigationProvider, {\n        value: navigation\n      }, /*#__PURE__*/React.createElement(Component, _extends({}, this.props, {\n        navigation: navigation\n      }))));\n    }\n\n  }\n\n  _defineProperty(NavigationContainer, \"router\", Component.router);\n\n  _defineProperty(NavigationContainer, \"navigationOptions\", null);\n\n  _defineProperty(NavigationContainer, \"defaultProps\", {\n    theme: 'light'\n  });\n\n  return NavigationContainer;\n}","map":{"version":3,"sources":["createAppContainer.js"],"names":["urlToPathAndParams","props","console","isStateful","containerProps","keys","Object","invariant","persistNavigationState","loadNavigationState","_statefulContainerCount","_reactNavigationIsHydratingState","React","Component","theme","getDerivedStateFromProps","validateProps","constructor","NavigationActions","BackHandler","nav","_renderLoading","_isStateful","url","uriPrefix","enableURLHandling","parsedUrl","params","action","_onNavigationStateChange","process","newState","lastState","prevNav","componentDidUpdate","componentDidMount","Platform","docsUrl","Linking","userProvidedStartupState","startupState","urlAction","dispatchActions","subscriber","type","state","getStartupParams","Promise","loadedNavState","componentDidCatch","componentWillUnmount","lastNavState","reducedState","navState","dispatchActionEvents","render","navigation","getNavigation"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport {\n  NavigationActions,\n  ThemeProvider,\n  pathUtils,\n  getNavigation,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn(\n      'You passed persistenceKey prop to a navigator. ' +\n        'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' +\n        'please see the navigation state persistence docs for more information. ' +\n        'Passing the persistenceKey prop is a no-op.'\n    );\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n  invariant(\n    (persistNavigationState === undefined &&\n      loadNavigationState === undefined) ||\n      (typeof persistNavigationState === 'function' &&\n        typeof loadNavigationState === 'function'),\n    'both persistNavigationState and loadNavigationState must either be undefined, or be functions'\n  );\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light',\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (\n        this._isStateful() &&\n        BackHandler &&\n        typeof BackHandler.addEventListener === 'function'\n      ) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.loadNavigationState\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState,\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log(\n              'Applying Navigation Action for Initial URL:',\n              parsedUrl\n            );\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([\n          Linking.getInitialURL(),\n          loadNavigationState && loadNavigationState(),\n        ]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState,\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async (nav) => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn(\n            'Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.'\n          );\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      if (this._linkingSub?.remove) {\n        this._linkingSub?.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = (action) => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return (\n        <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n  }\n\n  return NavigationContainer;\n}\n"]},"metadata":{},"sourceType":"module"}