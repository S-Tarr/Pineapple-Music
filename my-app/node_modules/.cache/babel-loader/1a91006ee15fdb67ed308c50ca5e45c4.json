{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext'; // prettier-ignore\n\nconst TOP = 0b1000,\n      RIGHT = 0b0100,\n      BOTTOM = 0b0010,\n      LEFT = 0b0001,\n      ALL = 0b1111;\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT\n};\nexport function SafeAreaView({\n  style = {},\n  mode,\n  edges,\n  ...rest\n}) {\n  const insets = useSafeAreaInsets();\n  const edgeBitmask = edges != null ? edges.reduce((accum, edge) => accum | edgeBitmaskMap[edge], 0) : ALL;\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n    const flatStyle = StyleSheet.flatten(style);\n\n    if (mode === 'margin') {\n      const {\n        margin = 0,\n        marginVertical = margin,\n        marginHorizontal = margin,\n        marginTop = marginVertical,\n        marginRight = marginHorizontal,\n        marginBottom = marginVertical,\n        marginLeft = marginHorizontal\n      } = flatStyle;\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft\n      };\n      return [style, marginStyle];\n    } else {\n      const {\n        padding = 0,\n        paddingVertical = padding,\n        paddingHorizontal = padding,\n        paddingTop = paddingVertical,\n        paddingRight = paddingHorizontal,\n        paddingBottom = paddingVertical,\n        paddingLeft = paddingHorizontal\n      } = flatStyle;\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft\n      };\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: appliedStyle\n  }, rest));\n}","map":{"version":3,"sources":["SafeAreaView.tsx"],"names":["TOP","RIGHT","BOTTOM","LEFT","ALL","edgeBitmaskMap","top","right","bottom","left","style","rest","insets","useSafeAreaInsets","edgeBitmask","edges","accum","appliedStyle","insetTop","insetRight","insetBottom","insetLeft","flatStyle","StyleSheet","mode","margin","marginVertical","marginHorizontal","marginTop","marginRight","marginBottom","marginLeft","marginStyle","padding","paddingVertical","paddingHorizontal","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingStyle"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext';\nimport { Edge, NativeSafeAreaViewProps } from './SafeArea.types';\n\n// prettier-ignore\nconst TOP    = 0b1000,\n      RIGHT  = 0b0100,\n      BOTTOM = 0b0010,\n      LEFT   = 0b0001,\n      ALL    = 0b1111;\n\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap: Record<Edge, number> = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT,\n};\n\nexport function SafeAreaView({\n  style = {},\n  mode,\n  edges,\n  ...rest\n}: NativeSafeAreaViewProps) {\n  const insets = useSafeAreaInsets();\n\n  const edgeBitmask =\n    edges != null\n      ? edges.reduce((accum, edge) => accum | edgeBitmaskMap[edge], 0)\n      : ALL;\n\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n\n    const flatStyle = StyleSheet.flatten(style) as Record<string, number>;\n\n    if (mode === 'margin') {\n      const {\n        margin = 0,\n        marginVertical = margin,\n        marginHorizontal = margin,\n        marginTop = marginVertical,\n        marginRight = marginHorizontal,\n        marginBottom = marginVertical,\n        marginLeft = marginHorizontal,\n      } = flatStyle;\n\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft,\n      };\n\n      return [style, marginStyle];\n    } else {\n      const {\n        padding = 0,\n        paddingVertical = padding,\n        paddingHorizontal = padding,\n        paddingTop = paddingVertical,\n        paddingRight = paddingHorizontal,\n        paddingBottom = paddingVertical,\n        paddingLeft = paddingHorizontal,\n      } = flatStyle;\n\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft,\n      };\n\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n\n  return <View style={appliedStyle} {...rest} />;\n}\n"]},"metadata":{},"sourceType":"module"}