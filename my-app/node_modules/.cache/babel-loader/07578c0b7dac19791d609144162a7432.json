{"ast":null,"code":"import * as React from 'react';\nimport { Dimensions, Platform, StyleSheet, View } from 'react-native';\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window'); // To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\n\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat({\n  children,\n  style\n}) {\n  return /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return /*#__PURE__*/React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["width","height","Dimensions","initialMetrics","initialWindowMetrics","frame","x","y","insets","top","left","right","bottom","style","styles","SafeAreaProviderCompat","container","flex"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAAA,IAAA,QAAA,cAAA;AAQA,SAAA,oBAAA,EAAA,qBAAA,EAAA,gBAAA,QAAA,gCAAA;AAWA,MAAM;AAAEA,EAAAA,KAAK,GAAP,CAAA;AAAaC,EAAAA,MAAM,GAAG;AAAtB,IAA4BC,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAAlC,C,CAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAClB,QAAQ,CAAR,EAAA,KAAA,KAAA,IAAyBC,oBAAoB,IAA7C,IAAA,GACI;AACEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,CAAC,EAAH,CAAA;AAAQC,IAAAA,CAAC,EAAT,CAAA;AAAA,IAAA,KAAA;AAAqBN,IAAAA;AAArB,GADT;AAEEO,EAAAA,MAAM,EAAE;AAAEC,IAAAA,GAAG,EAAL,CAAA;AAAUC,IAAAA,IAAI,EAAd,CAAA;AAAmBC,IAAAA,KAAK,EAAxB,CAAA;AAA6BC,IAAAA,MAAM,EAAE;AAArC;AAFV,CADJ,GADF,oBAAA;AAQA,eAAe,SAAA,sBAAA,CAAgC;AAAA,EAAA,QAAA;AAAYC,EAAAA;AAAZ,CAAhC,EAA4D;AACzE,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAA,QAAA,EAAA,IAAA,EACIL,MAAD,IAAY;AACX,QAAA,MAAA,EAAY;AACV;AACA;AACA;AACA,aAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACM,MAAM,CAAP,SAAA,EAAA,KAAA;AAAb,OAAA,EAAP,QAAO,CAAP;AACD;;AAED,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,MAAA,cAAc,EAAhC,cAAA;AAAkD,MAAA,KAAK,EAAED;AAAzD,KAAA,EADF,QACE,CADF;AAVN,GACE,CADF;AAkBD;AAEDE,sBAAsB,CAAtBA,cAAAA,GAAAA,cAAAA;AAEA,MAAMD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BE,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return <View style={[styles.container, style]}>{children}</View>;\n        }\n\n        return (\n          <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}