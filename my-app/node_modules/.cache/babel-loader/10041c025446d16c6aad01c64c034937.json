{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = { ...TabActions,\n\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n\n};\n\nconst isDrawerOpen = state => {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n};\n\nconst openDrawer = state => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return { ...state,\n    history: [...state.history, {\n      type: 'drawer',\n      status: 'open'\n    }]\n  };\n};\n\nconst closeDrawer = state => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return { ...state,\n    history: state.history.filter(it => it.type !== 'drawer')\n  };\n};\n\nexport default function DrawerRouter({\n  defaultStatus,\n  ...rest\n}) {\n  const router = TabRouter(rest);\n  return { ...router,\n    type: 'drawer',\n\n    getInitialState({\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n\n      return { ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return { ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","it","history","status","rest","router","TabRouter","getInitialState","routeGetIdList","defaultStatus","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: 'open' | 'closed';\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: 'open' }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer', status: 'open' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  defaultStatus,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}