{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, Easing, Platform, Pressable } from 'react-native';\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\n\nexport default function PlatformPressable({\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  style,\n  ...rest\n}) {\n  const {\n    dark\n  } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue, duration) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true\n    }).start();\n  };\n\n  const handlePressIn = e => {\n    animateTo(pressOpacity, 0);\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n  };\n\n  const handlePressOut = e => {\n    animateTo(1, 200);\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n  };\n\n  return /*#__PURE__*/React.createElement(AnimatedPressable, _extends({\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? {\n      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)',\n      ...android_ripple\n    } : undefined,\n    style: [{\n      opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1\n    }, style]\n  }, rest));\n}","map":{"version":3,"sources":["PlatformPressable.tsx"],"names":["AnimatedPressable","Animated","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","pressOpacity","rest","dark","useTheme","React","animateTo","easing","Easing","useNativeDriver","handlePressIn","e","onPressIn","handlePressOut","onPressOut","color","pressColor","android_ripple","opacity"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,QAAA,QAAA,0BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,cAAA;AAkBA,MAAMA,iBAAiB,GAAGC,QAAQ,CAARA,uBAAAA,CAA1B,SAA0BA,CAA1B;AAEA,MAAMC,wBAAwB,GAA9B,EAAA;AACA,MAAMC,uBAAuB,GAC3BC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAA6BA,QAAQ,CAARA,OAAAA,IAD/B,wBAAA;AAGA;AACA;AACA;;AACA,eAAe,SAAA,iBAAA,CAA2B;AAAA,EAAA,SAAA;AAAA,EAAA,UAAA;AAAA,EAAA,cAAA;AAAA,EAAA,UAAA;AAKxCC,EAAAA,YAAY,GAL4B,GAAA;AAAA,EAAA,KAAA;AAOxC,KAAGC;AAPqC,CAA3B,EAQL;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAWC,QAAjB,EAAA;AACA,QAAM,CAAA,OAAA,IAAYC,KAAK,CAALA,QAAAA,CAAe,MAAM,IAAIR,QAAQ,CAAZ,KAAA,CAAvC,CAAuC,CAArBQ,CAAlB;;AAEA,QAAMC,SAAS,GAAG,CAAA,OAAA,EAAA,QAAA,KAAuC;AACvD,QAAA,uBAAA,EAA6B;AAC3B;AACD;;AAEDT,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,OAAAA,EAAyB;AAAA,MAAA,OAAA;AAAA,MAAA,QAAA;AAGvBU,MAAAA,MAAM,EAAEC,MAAM,CAANA,KAAAA,CAAaA,MAAM,CAHJ,IAGfA,CAHe;AAIvBC,MAAAA,eAAe,EAAE;AAJM,KAAzBZ,EAAAA,KAAAA;AALF,GAAA;;AAaA,QAAMa,aAAa,GAAIC,CAAD,IAA8B;AAClDL,IAAAA,SAAS,CAAA,YAAA,EAATA,CAAS,CAATA;AACAM,IAAAA,SAAS,KAATA,IAAAA,IAAAA,SAAS,KAAA,KAATA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAS,CAATA,CAAS,CAATA;AAFF,GAAA;;AAKA,QAAMC,cAAc,GAAIF,CAAD,IAA8B;AACnDL,IAAAA,SAAS,CAAA,CAAA,EAATA,GAAS,CAATA;AACAQ,IAAAA,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAA,KAAVA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAVA,CAAU,CAAVA;AAFF,GAAA;;AAKA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AACE,IAAA,SAAS,EADX,aAAA;AAEE,IAAA,UAAU,EAFZ,cAAA;AAGE,IAAA,cAAc,EACZf,uBAAuB,GACnB;AACEgB,MAAAA,KAAK,EACHC,UAAU,KAAVA,SAAAA,GAAAA,UAAAA,GAEIb,IAAI,GAAA,0BAAA,GAJZ,oBAAA;AAOE,SAAGc;AAPL,KADmB,GAJ3B,SAAA;AAgBE,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAE,CAAA,uBAAA,GAAA,OAAA,GAAqC;AAAhD,KAAD,EAAA,KAAA;AAhBT,GAAA,EADF,IACE,CAAA,CADF;AAqBD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  PressableProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nexport type Props = Omit<PressableProps, 'style'> & {\n  pressColor?: string;\n  pressOpacity?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  children: React.ReactNode;\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport default function PlatformPressable({\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  style,\n  ...rest\n}: Props) {\n  const { dark } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue: number, duration: number) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n\n  return (\n    <AnimatedPressable\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? {\n              color:\n                pressColor !== undefined\n                  ? pressColor\n                  : dark\n                  ? 'rgba(255, 255, 255, .32)'\n                  : 'rgba(0, 0, 0, .32)',\n              ...android_ripple,\n            }\n          : undefined\n      }\n      style={[{ opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1 }, style]}\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}