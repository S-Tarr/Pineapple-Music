{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nexport const NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\nexport default function createNavigationContainerRef() {\n  const methods = [...Object.keys(CommonActions), 'addListener', 'removeListener', 'resetRoot', 'dispatch', 'isFocused', 'canGoBack', 'getRootState', 'getState', 'getParent', 'getCurrentRoute', 'getCurrentOptions'];\n  const listeners = {};\n\n  const removeListener = (event, callback) => {\n    var _listeners$event;\n\n    listeners[event] = (_listeners$event = listeners[event]) === null || _listeners$event === void 0 ? void 0 : _listeners$event.filter(cb => cb !== callback);\n  };\n\n  let current = null;\n  const ref = {\n    get current() {\n      return current;\n    },\n\n    set current(value) {\n      current = value;\n\n      if (value != null) {\n        Object.entries(listeners).forEach(([event, callbacks]) => {\n          callbacks.forEach(callback => {\n            value.addListener(event, callback);\n          });\n        });\n      }\n    },\n\n    isReady: () => {\n      if (current == null) {\n        return false;\n      }\n\n      return current.isReady();\n    },\n    ...methods.reduce((acc, name) => {\n      acc[name] = (...args) => {\n        if (current == null) {\n          switch (name) {\n            case 'addListener':\n              {\n                const [event, callback] = args;\n                listeners[event] = listeners[event] || [];\n                listeners[event].push(callback);\n                return () => removeListener(event, callback);\n              }\n\n            case 'removeListener':\n              {\n                const [event, callback] = args;\n                removeListener(event, callback);\n                break;\n              }\n\n            default:\n              console.error(NOT_INITIALIZED_ERROR);\n          }\n        } else {\n          // @ts-expect-error: this is ok\n          return current[name](...args);\n        }\n      };\n\n      return acc;\n    }, {})\n  };\n  return ref;\n}","map":{"version":3,"sources":["createNavigationContainerRef.tsx"],"names":["NOT_INITIALIZED_ERROR","methods","Object","listeners","removeListener","cb","current","ref","value","callbacks","callback","isReady","acc","console"],"mappings":"AAAA,SAAA,aAAA,QAAA,2BAAA;AAQA,OAAO,MAAMA,qBAAqB,GAA3B,+QAAA;AAGP,eAAe,SAAA,4BAAA,GAEmC;AAChD,QAAMC,OAAO,GAAG,CACd,GAAGC,MAAM,CAANA,IAAAA,CADW,aACXA,CADW,EAAA,aAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,cAAA,EAAA,UAAA,EAAA,WAAA,EAAA,iBAAA,EAAhB,mBAAgB,CAAhB;AAeA,QAAMC,SAAuD,GAA7D,EAAA;;AAEA,QAAMC,cAAc,GAAG,CAAA,KAAA,EAAA,QAAA,KAGlB;AAAA,QAAA,gBAAA;;AACHD,IAAAA,SAAS,CAATA,KAAS,CAATA,GAAAA,CAAAA,gBAAAA,GAAmBA,SAAS,CAA5BA,KAA4B,CAA5BA,MAAAA,IAAAA,IAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAmBA,gBAAAA,CAAAA,MAAAA,CAA0BE,EAAD,IAAQA,EAAE,KAAtDF,QAAmBA,CAAnBA;AAJF,GAAA;;AAOA,MAAIG,OAAiD,GAArD,IAAA;AAEA,QAAMC,GAAiD,GAAG;AACxD,QAAA,OAAA,GAAc;AACZ,aAAA,OAAA;AAFsD,KAAA;;AAIxD,QAAA,OAAA,CAAA,KAAA,EAA6D;AAC3DD,MAAAA,OAAO,GAAPA,KAAAA;;AAEA,UAAIE,KAAK,IAAT,IAAA,EAAmB;AACjBN,QAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAAkC,CAAC,CAAA,KAAA,EAAD,SAAC,CAAD,KAAwB;AACxDO,UAAAA,SAAS,CAATA,OAAAA,CAAmBC,QAAD,IAAc;AAC9BF,YAAAA,KAAK,CAALA,WAAAA,CAAAA,KAAAA,EAAAA,QAAAA;AADFC,WAAAA;AADFP,SAAAA;AAQD;AAhBqD,KAAA;;AAkBxDS,IAAAA,OAAO,EAAE,MAAM;AACb,UAAIL,OAAO,IAAX,IAAA,EAAqB;AACnB,eAAA,KAAA;AACD;;AAED,aAAOA,OAAO,CAAd,OAAOA,EAAP;AAvBsD,KAAA;AAyBxD,OAAG,OAAO,CAAP,MAAA,CAAoB,CAAA,GAAA,EAAA,IAAA,KAAe;AACpCM,MAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAY,CAAC,GAAD,IAAA,KAAoB;AAC9B,YAAIN,OAAO,IAAX,IAAA,EAAqB;AACnB,kBAAA,IAAA;AACE,iBAAA,aAAA;AAAoB;AAClB,sBAAM,CAAA,KAAA,EAAA,QAAA,IAAN,IAAA;AAEAH,gBAAAA,SAAS,CAATA,KAAS,CAATA,GAAmBA,SAAS,CAATA,KAAS,CAATA,IAAnBA,EAAAA;AACAA,gBAAAA,SAAS,CAATA,KAAS,CAATA,CAAAA,IAAAA,CAAAA,QAAAA;AAEA,uBAAO,MAAMC,cAAc,CAAA,KAAA,EAA3B,QAA2B,CAA3B;AACD;;AACD,iBAAA,gBAAA;AAAuB;AACrB,sBAAM,CAAA,KAAA,EAAA,QAAA,IAAN,IAAA;AAEAA,gBAAAA,cAAc,CAAA,KAAA,EAAdA,QAAc,CAAdA;AACA;AACD;;AACD;AACES,cAAAA,OAAO,CAAPA,KAAAA,CAAAA,qBAAAA;AAhBJ;AADF,SAAA,MAmBO;AACL;AACA,iBAAOP,OAAO,CAAPA,IAAO,CAAPA,CAAc,GAArB,IAAOA,CAAP;AACD;AAvBHM,OAAAA;;AAyBA,aAAA,GAAA;AA1BC,KAAA,EAAA,EAAA;AAzBqD,GAA1D;AAuDA,SAAA,GAAA;AACD","sourcesContent":["import { CommonActions } from '@react-navigation/routers';\n\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerRefWithCurrent,\n} from './types';\n\nexport const NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nexport default function createNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const methods = [\n    ...Object.keys(CommonActions),\n    'addListener',\n    'removeListener',\n    'resetRoot',\n    'dispatch',\n    'isFocused',\n    'canGoBack',\n    'getRootState',\n    'getState',\n    'getParent',\n    'getCurrentRoute',\n    'getCurrentOptions',\n  ] as const;\n\n  const listeners: Record<string, ((...args: any[]) => void)[]> = {};\n\n  const removeListener = (\n    event: string,\n    callback: (...args: any[]) => void\n  ) => {\n    listeners[event] = listeners[event]?.filter((cb) => cb !== callback);\n  };\n\n  let current: NavigationContainerRef<ParamList> | null = null;\n\n  const ref: NavigationContainerRefWithCurrent<ParamList> = {\n    get current() {\n      return current;\n    },\n    set current(value: NavigationContainerRef<ParamList> | null) {\n      current = value;\n\n      if (value != null) {\n        Object.entries(listeners).forEach(([event, callbacks]) => {\n          callbacks.forEach((callback) => {\n            value.addListener(\n              event as keyof NavigationContainerEventMap,\n              callback\n            );\n          });\n        });\n      }\n    },\n    isReady: () => {\n      if (current == null) {\n        return false;\n      }\n\n      return current.isReady();\n    },\n    ...methods.reduce<any>((acc, name) => {\n      acc[name] = (...args: any[]) => {\n        if (current == null) {\n          switch (name) {\n            case 'addListener': {\n              const [event, callback] = args;\n\n              listeners[event] = listeners[event] || [];\n              listeners[event].push(callback);\n\n              return () => removeListener(event, callback);\n            }\n            case 'removeListener': {\n              const [event, callback] = args;\n\n              removeListener(event, callback);\n              break;\n            }\n            default:\n              console.error(NOT_INITIALIZED_ERROR);\n          }\n        } else {\n          // @ts-expect-error: this is ok\n          return current[name](...args);\n        }\n      };\n      return acc;\n    }, {}),\n  };\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module"}